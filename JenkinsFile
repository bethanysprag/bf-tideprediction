#!/usr/bin/groovy

node {
  def root = pwd()
  def mvn = tool 'M3'

  stage('Setup') {
    deleteDir()
    if(env.GITLAB_CREDS) {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
    }
  }

  def appvers = sh(script: "git describe --long --tags --always | sed 's/\\./-/'g", returnStdout: true)
  appvers = appvers.trim()
  def appName = "bf-tideprediction-${appvers}"

  stage('Archive') {
    // Build
    sh "./ci/archive.sh"
    // Check if exists already
    def getDependencyStatus = sh(script: """mvn -X --settings ~/.m2/settings.xml dependency:get \
      -Dmaven.repo.local="${root}/.m2/repository" \
      -DrepositoryId=nexus \
      -DartifactId=bf-tideprediction \
      -Dversion=${appvers} \
      -DgroupId="org.venice.beachfront" \
      -Dpackaging=zip \
      -DremoteRepositories="nexus::default::${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
    """, returnStatus: true)
    echo "dependency status = ${getDependencyStatus}"
    if (getDependencyStatus == 0) {
      echo "Artifact version ${appvers} exists in Nexus, nothing to do"
    } else {
     sh """mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${root}/bf-tideprediction.zip \
        -DrepositoryId=nexus \
        -Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
        -DgroupId="org.venice.beachfront" \
        -DgeneratePom=false \
        -Dpackaging=zip \
        -Dmaven.repo.local="${root}/.m2/repository" \
        -DartifactId=bf-tideprediction \
        -Dversion=${appvers}
      """
    }
  }

  stage('Scans') {
    withCredentials([[$class: "StringBinding", credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]]) {
      // Dependency Checker
      sh "/jslave/dependency-check/dependency-check/bin/dependency-check.sh --version"
      sh '/jslave/dependency-check/dependency-check/bin/dependency-check.sh --project "bf-tideprediction" --scan "." --format "XML" --enableExperimental --disableBundleAudit'
      sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
      // Fortify
      sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} ./{*.py,**/*.py}"
      sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx1G -f fortifyResults-${env.BUILD_NUMBER}.fpr"
      sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr ${env.THREADFIX_URL}/rest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
    }
    // TODO: Does Python do Sonar?
  }  

  stage("Security Scan Pass/Fail") {
    // Query threadfix and block if any highs/crits are found
    // TODO: Put back in
    /*sh "mkdir -p sspf-pkg"
    dir("./sspf-pkg") {
      withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
        sh "curl -L ${env.SSPF_PACKAGE} -o sspf.zip"
        sh "unzip sspf.zip"
        dir("./sspf-master/sspf") {
          sh "/bin/curl --fail --silent ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}?apiKey=${THREADFIX_KEY} | ./sspf.py"
        }
      }
    }*/
  }  

}

